// <auto-generated />
using System;
using AplicatieLicenta.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AplicatieLicenta.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AplicatieLicenta.Models.Admin", b =>
                {
                    b.Property<int>("IdAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_admin");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAdmin"));

                    b.Property<DateTime?>("BlocatPanaLa")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<int>("NumarIncercariEsec")
                        .HasColumnType("int");

                    b.Property<string>("Parola")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("parola");

                    b.HasKey("IdAdmin")
                        .HasName("PK__Admins__89472E95FD08EAAE");

                    b.HasIndex(new[] { "Email" }, "UQ__Admins__AB6E6164E28AE9E5")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("AplicatieLicenta.Models.Carti", b =>
                {
                    b.Property<int>("IdCarte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_carte");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCarte"));

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("autor");

                    b.Property<DateTime?>("DataAdaugarii")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_adaugarii")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<TimeSpan?>("DurataAscultare")
                        .HasColumnType("time")
                        .HasColumnName("durata_ascultare");

                    b.Property<string>("ImagineCoperta")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Imagine_Coperta");

                    b.Property<string>("TipCarte")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("tip_carte");

                    b.Property<string>("Titlu")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("titlu");

                    b.Property<string>("UrlFisier")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("url_fisier");

                    b.HasKey("IdCarte")
                        .HasName("PK__Carti__D3C2E8FD46C36E6A");

                    b.ToTable("Carti", (string)null);
                });

            modelBuilder.Entity("AplicatieLicenta.Models.CategorieVarsta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Denumire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoriiVarsta");
                });

            modelBuilder.Entity("AplicatieLicenta.Models.CluburiLectura", b =>
                {
                    b.Property<int>("IdClub")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_club");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClub"));

                    b.Property<DateTime?>("DataCrearii")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_crearii")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Descriere")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descriere");

                    b.Property<int>("IdCreator")
                        .HasColumnType("int")
                        .HasColumnName("id_creator");

                    b.Property<string>("Nume")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nume");

                    b.HasKey("IdClub")
                        .HasName("PK__CluburiL__6FA6EEEF42C5FAB3");

                    b.HasIndex("IdCreator");

                    b.ToTable("CluburiLectura", (string)null);
                });

            modelBuilder.Entity("AplicatieLicenta.Models.Gen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Denumire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genuri");
                });

            modelBuilder.Entity("AplicatieLicenta.Models.MembriClub", b =>
                {
                    b.Property<int>("IdMembru")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_membru");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMembru"));

                    b.Property<DateTime?>("DataInscrierii")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_inscrierii")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IdClub")
                        .HasColumnType("int")
                        .HasColumnName("id_club");

                    b.Property<int>("IdUtilizator")
                        .HasColumnType("int")
                        .HasColumnName("id_utilizator");

                    b.HasKey("IdMembru")
                        .HasName("PK__MembriCl__4CD20D51571C51C3");

                    b.HasIndex("IdClub");

                    b.HasIndex("IdUtilizator");

                    b.ToTable("MembriClub", (string)null);
                });

            modelBuilder.Entity("AplicatieLicenta.Models.Recenzii", b =>
                {
                    b.Property<int>("IdRecenzie")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_recenzie");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRecenzie"));

                    b.Property<string>("Comentariu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comentariu");

                    b.Property<DateOnly?>("DataPublicarii")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("data_publicarii")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EmailUtilizator")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email_utilizator");

                    b.Property<int>("IdCarte")
                        .HasColumnType("int")
                        .HasColumnName("id_carte");

                    b.Property<int?>("IdUtilizator")
                        .HasColumnType("int")
                        .HasColumnName("id_utilizator");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.HasKey("IdRecenzie")
                        .HasName("PK__Recenzii__8450F2741057739C");

                    b.HasIndex("IdCarte");

                    b.HasIndex("IdUtilizator");

                    b.ToTable("Recenzii", (string)null);
                });

            modelBuilder.Entity("AplicatieLicenta.Models.User", b =>
                {
                    b.Property<int>("IdUtilizator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_utilizator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUtilizator"));

                    b.Property<DateTime?>("BlocatPanaLa")
                        .HasColumnType("datetime2");

                    b.Property<string>("CategorieVarsta")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("categorie_varsta");

                    b.Property<DateTime?>("DataInregistrare")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_inregistrare")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("ExpirareToken")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumarIncercariEsec")
                        .HasColumnType("int");

                    b.Property<string>("Parola")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("parola");

                    b.Property<string>("TipUtilizator")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("tip_utilizator");

                    b.Property<string>("TokenResetare")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUtilizator")
                        .HasName("PK__Users__55C459EA537962FB");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__AB6E616466EFE643")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AplicatieLicenta.Models.UsersActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UsersActivity");
                });

            modelBuilder.Entity("AplicatieLicenta.Models.Vizitatori", b =>
                {
                    b.Property<int>("IdVizita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_vizita");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVizita"));

                    b.Property<DateTime?>("DataVizitei")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data_vizitei")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("IdUtilizator")
                        .HasColumnType("int")
                        .HasColumnName("id_utilizator");

                    b.Property<string>("TipUtilizator")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("tip_utilizator");

                    b.HasKey("IdVizita")
                        .HasName("PK__Vizitato__8E2EF95ABAC6D5B7");

                    b.HasIndex("IdUtilizator");

                    b.ToTable("Vizitatori", (string)null);
                });

            modelBuilder.Entity("CartiCategorieVarsta", b =>
                {
                    b.Property<int>("CartiIdCarte")
                        .HasColumnType("int");

                    b.Property<int>("CategoriiVarstaId")
                        .HasColumnType("int");

                    b.HasKey("CartiIdCarte", "CategoriiVarstaId");

                    b.HasIndex("CategoriiVarstaId");

                    b.ToTable("CarteCategorieVarsta", (string)null);
                });

            modelBuilder.Entity("CartiGen", b =>
                {
                    b.Property<int>("CartiIdCarte")
                        .HasColumnType("int");

                    b.Property<int>("GenuriId")
                        .HasColumnType("int");

                    b.HasKey("CartiIdCarte", "GenuriId");

                    b.HasIndex("GenuriId");

                    b.ToTable("CarteGen", (string)null);
                });

            modelBuilder.Entity("AplicatieLicenta.Models.CluburiLectura", b =>
                {
                    b.HasOne("AplicatieLicenta.Models.User", "IdCreatorNavigation")
                        .WithMany("CluburiLectura")
                        .HasForeignKey("IdCreator")
                        .IsRequired()
                        .HasConstraintName("FK__CluburiLe__id_cr__4D94879B");

                    b.Navigation("IdCreatorNavigation");
                });

            modelBuilder.Entity("AplicatieLicenta.Models.MembriClub", b =>
                {
                    b.HasOne("AplicatieLicenta.Models.CluburiLectura", "IdClubNavigation")
                        .WithMany("MembriClub")
                        .HasForeignKey("IdClub")
                        .IsRequired()
                        .HasConstraintName("FK__MembriClu__id_cl__5165187F");

                    b.HasOne("AplicatieLicenta.Models.User", "IdUtilizatorNavigation")
                        .WithMany("MembriClub")
                        .HasForeignKey("IdUtilizator")
                        .IsRequired()
                        .HasConstraintName("FK__MembriClu__id_ut__52593CB8");

                    b.Navigation("IdClubNavigation");

                    b.Navigation("IdUtilizatorNavigation");
                });

            modelBuilder.Entity("AplicatieLicenta.Models.Recenzii", b =>
                {
                    b.HasOne("AplicatieLicenta.Models.Carti", "IdCarteNavigation")
                        .WithMany("Recenzii")
                        .HasForeignKey("IdCarte")
                        .IsRequired()
                        .HasConstraintName("FK__Recenzii__id_car__48CFD27E");

                    b.HasOne("AplicatieLicenta.Models.User", "IdUtilizatorNavigation")
                        .WithMany("Recenzii")
                        .HasForeignKey("IdUtilizator")
                        .HasConstraintName("FK__Recenzii__id_uti__49C3F6B7");

                    b.Navigation("IdCarteNavigation");

                    b.Navigation("IdUtilizatorNavigation");
                });

            modelBuilder.Entity("AplicatieLicenta.Models.Vizitatori", b =>
                {
                    b.HasOne("AplicatieLicenta.Models.User", "IdUtilizatorNavigation")
                        .WithMany("Vizitatori")
                        .HasForeignKey("IdUtilizator")
                        .HasConstraintName("FK__Vizitator__id_ut__440B1D61");

                    b.Navigation("IdUtilizatorNavigation");
                });

            modelBuilder.Entity("CartiCategorieVarsta", b =>
                {
                    b.HasOne("AplicatieLicenta.Models.Carti", null)
                        .WithMany()
                        .HasForeignKey("CartiIdCarte")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AplicatieLicenta.Models.CategorieVarsta", null)
                        .WithMany()
                        .HasForeignKey("CategoriiVarstaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartiGen", b =>
                {
                    b.HasOne("AplicatieLicenta.Models.Carti", null)
                        .WithMany()
                        .HasForeignKey("CartiIdCarte")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AplicatieLicenta.Models.Gen", null)
                        .WithMany()
                        .HasForeignKey("GenuriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AplicatieLicenta.Models.Carti", b =>
                {
                    b.Navigation("Recenzii");
                });

            modelBuilder.Entity("AplicatieLicenta.Models.CluburiLectura", b =>
                {
                    b.Navigation("MembriClub");
                });

            modelBuilder.Entity("AplicatieLicenta.Models.User", b =>
                {
                    b.Navigation("CluburiLectura");

                    b.Navigation("MembriClub");

                    b.Navigation("Recenzii");

                    b.Navigation("Vizitatori");
                });
#pragma warning restore 612, 618
        }
    }
}
