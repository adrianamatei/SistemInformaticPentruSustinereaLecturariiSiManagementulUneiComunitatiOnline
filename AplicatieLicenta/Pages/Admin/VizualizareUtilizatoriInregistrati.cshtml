@page
@model AplicatieLicenta.Pages.Admin.VizualizareUtilizatoriInregistratiModel
@{
    Layout = "~/Pages/Shared/AdminLayout.cshtml";
}
<!DOCTYPE html>
<html lang="ro">
<head>
    <meta charset="UTF-8">
    <title>Calendar cu Activități</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f2f3f5;
            padding: 20px;
            margin: 0;
        }

        .overview-calendar-container {
            display: flex;
            justify-content: center;
            gap: 60px;
            align-items: flex-start;
            margin-top: 30px;
            flex-wrap: wrap;
        }
        .total-activitati-box {
            background-color: #fffbe6;
            padding: 20px 30px;
            border-radius: 12px;
            box-shadow: 0 6px 16px rgba(0,0,0,0.06);
            font-weight: 600;
            color: #333;
            font-size: 16px;
            min-width: 300px;
            max-width: 400px;
            text-align: center;
        }

        .calendar {
            min-width: 320px;
            max-width: 380px;
            background-color: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);
        }

        .days {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 10px;
            justify-content: center;
            margin-top: 10px;
        }

        .day {
            cursor: pointer;
            padding: 10px 0;
            border-radius: 8px;
            background-color: #f5f5f5;
            transition: background-color 0.3s ease;
        }

            .day:hover {
                background-color: #ffe2cc;
            }

            .day.selected {
                background-color: #ff944d;
                color: white;
                font-weight: bold;
            }

            .day.today {
                border-bottom: 3px solid orange;
            }

        .nav-buttons {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

            .nav-buttons button {
                border: none;
                background: none;
                font-size: 18px;
                cursor: pointer;
            }

            .nav-buttons span {
                font-size: 18px;
                font-weight: 600;
            }

        .activity-filters {
            margin: 30px auto 10px auto;
            text-align: center;
        }

            .activity-filters button {
                background-color: #C8AD7F;
                border: 1px solid #e6dccc;
                margin: 0 5px 10px 5px;
                padding: 8px 18px;
                border-radius: 25px;
                cursor: pointer;
                font-weight: 500;
                transition: background-color 0.3s, transform 0.2s;
                color: #333;
            }

                .activity-filters button:hover {
                    background-color: #C8AD7F;
                    transform: scale(1.05);
                }


        .activities {
            margin-top: 40px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .activity-card {
            background-color: #ffffff;
            border-radius: 10px;
            padding: 15px 20px;
            margin-bottom: 15px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.05);
            text-align: left;
            transition: transform 0.2s;
        }

            .activity-card:hover {
                transform: scale(1.02);
            }

            .activity-card strong {
                font-size: 16px;
                color: #333;
                display: block;
                margin-bottom: 6px;
            }

            .activity-card p {
                margin: 0;
                font-size: 14px;
                color: #444;
            }

            .activity-card small {
                color: #777;
                font-size: 12px;
            }
    </style>
</head>
<body>

    <div class="overview-calendar-container">
        @if (!string.IsNullOrEmpty(Model.DataSelectata))
        {
            <div class="total-activitati-box">
                <span style="color: #666;">Total activități înregistrate pe site în</span>
                <strong style="color:#ff944d">@Model.DataSelectata</strong>: <strong>@Model.TotalActivitati</strong>
            </div>
        }

        <div class="calendar">
            <div class="nav-buttons">
                <button onclick="prevMonth()">&#8592;</button>
                <span id="month-year-label"></span>
                <button onclick="nextMonth()">&#8594;</button>
            </div>
            <div class="days" id="calendar-days"></div>
        </div>
    </div>

    <div class="activity-filters">
        <button onclick="filtreazaActivitati('toate')">Toate</button>
        <button onclick="filtreazaActivitati('pdf')">Activități Cărți PDF</button>
        <button onclick="filtreazaActivitati('audio')">Activități Cărți Audio</button>
        <button onclick="filtreazaActivitati('autentificare')">Activități Autentificări</button>
        <button onclick="filtreazaActivitati('recenzie')">Activități Recenzii</button>
    </div>

    <div class="activities">
        @if (Model.Activitati.Any())
        {
            <h3>Activități din @Model.DataSelectata</h3>
            <div id="activity-list">
                @foreach (var a in Model.Activitati)
                {
                    <div class="activity-card">
                        <strong>@a.Email</strong>
                        <p>
                            @a.Actiune
                            @if (!string.IsNullOrEmpty(a.Detalii))
                            {
                                <br />
                                <em>@a.Detalii</em>
                            }
                        </p>
                        <small>@a.Timestamp.ToString("HH:mm")</small>
                    </div>
                }
            </div>
        }
        else if (!string.IsNullOrEmpty(Model.DataSelectata))
        {
            <h3>Activități din @Model.DataSelectata</h3>
            <p>Nicio activitate înregistrată.</p>
        }
        else
        {
            <h3>Selectează o zi pentru a vedea activitățile</h3>
        }
    </div>

    <script>
        const today = new Date();
        let currentMonth = today.getMonth();
        let currentYear = today.getFullYear();

        const calendarDays = document.getElementById('calendar-days');
        const monthYearLabel = document.getElementById('month-year-label');

        const months = ["Ianuarie", "Februarie", "Martie", "Aprilie", "Mai", "Iunie", "Iulie", "August", "Septembrie", "Octombrie", "Noiembrie", "Decembrie"];

        function generateCalendar(month, year) {
            calendarDays.innerHTML = "";
            monthYearLabel.textContent = `${months[month]} ${year}`;

            const firstDay = new Date(year, month, 1).getDay();
            const daysInMonth = new Date(year, month + 1, 0).getDate();

            for (let i = 0; i < firstDay; i++) {
                const empty = document.createElement('div');
                calendarDays.appendChild(empty);
            }

            for (let d = 1; d <= daysInMonth; d++) {
                const day = document.createElement('div');
                day.className = 'day';
                day.textContent = d;

                const isToday = d === today.getDate() && month === today.getMonth() && year === today.getFullYear();
                if (isToday) day.classList.add("today");

                day.addEventListener('click', () => {
                    const selectedDate = `${year}-${String(month + 1).padStart(2, '0')}-${String(d).padStart(2, '0')}`;
                    window.location.href = `?DataSelectata=${selectedDate}`;
                });

                calendarDays.appendChild(day);
            }
        }

        function prevMonth() {
            currentMonth--;
            if (currentMonth < 0) {
                currentMonth = 11;
                currentYear--;
            }
            generateCalendar(currentMonth, currentYear);
        }

        function nextMonth() {
            currentMonth++;
            if (currentMonth > 11) {
                currentMonth = 0;
                currentYear++;
            }
            generateCalendar(currentMonth, currentYear);
        }

        function filtreazaActivitati(categorie) {
            const activitati = document.querySelectorAll(".activity-card");
            activitati.forEach(card => {
                const text = card.innerText.toLowerCase();
                card.style.display = (categorie === "toate" || text.includes(categorie.toLowerCase())) ? "block" : "none";
            });
        }

        generateCalendar(currentMonth, currentYear);
    </script>
</body>
</html>
