@page
@attribute [IgnoreAntiforgeryToken]
@model AplicatieLicenta.Pages.Users.StartUserModel
@{
    ViewData["Title"] = "Cluburi de lectură";
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success text-center fw-bold">@TempData["Success"]</div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger text-center fw-bold">@TempData["Error"]</div>
    }

}

<!-- HEADER CU AVATAR ȘI EMAIL -->
<div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 1rem;">
    <div style="display: flex; align-items: center;">
        <img src="/images/avatar/@Model.AvatarImagine" alt="Avatar"
             style="width: 60px; height: 60px; object-fit: cover; border-radius: 50%; margin-right: 1rem;">
        <h2 style="color: #5a422a; margin: 0;">@Model.UserEmail</h2>
    </div>

    <button onclick="afiseazaFavorite()" class="btn btn-sm"
            style="background: none; color: #8b0000; font-weight: bold; font-size: 15px; border: none; cursor: pointer;">
        ❤️ Vizualizează cărțile favorite
    </button>
</div>



<div style="display: flex; gap: 2rem;">
    <!-- STÂNGA: CLASAMENT + PROGRES -->
    <div style="flex: 1; background-color: #fff8e6; padding: 1rem; border-radius: 10px;">
        <!-- SECTIUNEA PROGRES PERSONAL -->
        <div class="sectiune-joc">
            <h3 style="color: #8b5e3c;">Progresul tău în joc</h3>
            <div class="avatar-box">
                <p><strong>Avatar curent:</strong> @ViewData["AvatarCurent"]</p>
                <p><strong>Scor total:</strong> @ViewData["ScorTotal"]</p>
                <p><strong>Piese obținute:</strong> @ViewData["Piese"] / @ViewData["TotalPiese"]</p>
                @if ((int)ViewData["Piese"] < (int)ViewData["TotalPiese"])
                {
                    <p><strong>Mai ai @((int)ViewData["TotalPiese"] - (int)ViewData["Piese"]) piesă(e) până la următorul nivel</strong></p>
                }
                else
                {
                    <p><strong>Ai atins nivelul maxim! 🎉</strong></p>
                }
            </div>
        </div>

        <hr />

        <!-- SECTIUNEA CLASAMENT GLOBAL -->
        <div class="clasament-global">
            <h3 style="color: #8b5e3c;">Clasamentul copiilor (Top utilizatori)</h3>
            @{
                var top3 = ((IEnumerable<dynamic>)ViewData["TopUtilizatori"]).Take(3).ToList();
                var esteInTop3 = top3.Any(u => u.Email == Model.UserEmail);
            }

            @if (esteInTop3)
            {
                <div style="text-align: center; margin-bottom: 1rem;">
                    <a class="btn btn-success"
                       style="background-color:#C8AD7F; color: white; padding: 0.5rem 1.5rem; border-radius: 5px;"
                       href="/Users/DescarcaDiploma">
                         Descarca-ti acum diploma castigata !
                    </a>
                </div>
            }
            <table class="table table-striped" style="background-color: #fffaf0;">
                <thead>
                    <tr>
                        <th>Loc</th>
                        <th>Nume</th>
                        <th>Scor total</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        var index = 0;
                    }
                    @foreach (var u in (IEnumerable<dynamic>)ViewData["TopUtilizatori"])
                    {
                        <tr>
                            <td>@(++index)</td>
                            <td>@u.Email</td>
                            <td>@u.Scor</td>
                        </tr>
                    }

                </tbody>
            </table>

            <div style="text-align: center; margin-top: 1.5rem;">
                <a class="btn btn-primary" style="background-color: #C8AD7F; border: none; color: white; padding: 0.5rem 1.5rem; border-radius: 5px;" href="/Users/VizualizareTeste">
                    Vezi testele tale
                </a>
            </div>
        </div>
    </div>

    <!-- DREAPTA: CLUBURI DE LECTURĂ -->

    <div style="flex: 1; background-color: #fff8e6; padding: 1rem; border-radius: 10px;">
        <h3 style="color: #8b5e3c;">Cluburi de lectură pentru categoria ta de vârstă: <strong>@Model.CategorieVarsta</strong></h3>

        @foreach (var club in Model.CluburiRelevante)
        {
            var membru = club.MembriClub.FirstOrDefault(m => m.IdUtilizator == Model.UserId);

            <div class="club-card" style="background-color: #fffef4; padding: 1rem; border: 1px solid #e0c9a6; margin-bottom: 1rem; border-radius: 8px;">
                <h5>@club.Nume</h5>
                <p><strong>Descriere:</strong> @club.Descriere</p>
                <p><strong>Categorie:</strong> @club.CategorieVarsta</p>

                @if (membru != null)
                {
                    if (membru.Status == "Aprobat")
                    {
                        <button class="chat-open-btn" onclick="openChat('@club.Nume', @club.IdClub)">
                            Alătură-te discuțiilor despre cărțile preferate!
                        </button>
                    }
                    else if (membru.Status == "In asteptare")
                    {
                        <span class="pending-msg">Cererea ta a fost trimisă către admin.</span>
                    }
                }
                else
                {
                    <form method="post" asp-page-handler="Join">
                        <input type="hidden" name="clubId" value="@club.IdClub" />
                        <button type="submit" class="chat-open-btn">Intră acum în club!</button>
                    </form>
                }
            </div>
        }
    </div>
</div>
<div id="chenar-favorite" class="hidden"
     style="position: fixed; top: 100px; right: 50px; width: 350px; max-height: 500px; overflow-y: auto;
            background-color: #fffaf0; border: 2px solid #c8ad7f; border-radius: 10px; padding: 1rem; box-shadow: 0 0 10px rgba(0,0,0,0.2); z-index: 9999;">
    <div style="display: flex; justify-content: space-between; align-items: center;">
        <h5 style="margin: 0; color: #5a422a;">📚 Cărți favorite</h5>
        <button onclick="inchideFavorite()" style="background: none; border: none; font-size: 20px; color: #8b5e3c;">×</button>
    </div>
    <div id="continut-favorite" style="margin-top: 1rem;">
        <p>Se încarcă cărțile favorite...</p>
    </div>
</div>

<div id="chat-box" class="hidden">
    <div class="chat-header">
        <span id="chat-title">Discuție Club</span>
        <button onclick="toggleChat()">&times;</button>
    </div>
    <div class="chat-body" id="chat-messages"></div>
    <div class="chat-footer">
        <input id="messageInput" type="text" placeholder="Scrie un mesaj..." />
        <button onclick="sendMessage()">Trimite</button>
        <button onclick="startRecording()">Start</button>
        <button onclick="stopRecording()">Stop</button>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/designStartUser.css" />
}


@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        let connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        let currentClubId = 0;
        let mediaRecorder;
        let audioChunks = [];
        let recordedBlob = null;

        let userId = @Model.UserId;
        let userEmail = "@Model.UserEmail";

        connection.start()
            .then(() => console.log(" Conectat la SignalR"))
            .catch(err => console.error(" Eroare la conectare:", err));

        connection.on("ReceiveMessage", (email, mesaj, ora, audioUrl) => {
            addMessage(email, mesaj, ora, audioUrl);
        });

        function openChat(clubName, clubId) {
            currentClubId = clubId;
            document.getElementById("chat-title").textContent = "Discutie în " + clubName;
            document.getElementById("chat-box").classList.remove("hidden");
            document.getElementById("chat-box").classList.add("chat-box-visible");

            loadMesaje(clubId);
            connection.invoke("JoinClub", clubId).catch(err => console.error(err));
        }

        function toggleChat() {
            const chatBox = document.getElementById("chat-box");
            chatBox.classList.add("hidden");
            chatBox.classList.remove("chat-box-visible");
        }

       function addMessage(email, mesaj, ora, audioUrl = null) {
    const chatBody = document.getElementById("chat-messages");
    const mesajNou = document.createElement("div");
    mesajNou.classList.add("chat-message"); // aplica stilul aerisit

    if (audioUrl) {
        mesajNou.innerHTML = `
            <strong>${email}<time> (${ora})</time></strong>
            <audio controls>
                <source src="${audioUrl}" type="audio/webm">
                Browserul tău nu suportă fișiere audio.
            </audio>`;
    } else {
        mesajNou.innerHTML = `
            <strong>${email}<time> (${ora})</time></strong>
            <div>${mesaj}</div>`;
    }

    chatBody.appendChild(mesajNou);
    chatBody.scrollTop = chatBody.scrollHeight;
}


        function loadMesaje(idClub) {
            fetch('/Users/StartUser?handler=IncarcaMesaje&idClub=' + idClub)
                .then(res => res.json())
                .then(data => {
                    const chatBody = document.getElementById("chat-messages");
                    chatBody.innerHTML = "";
                    data.forEach(msg => {
                        addMessage(msg.email, msg.continut, msg.dataTrimiterii, msg.audioUrl);
                    });
                })
                .catch(err => console.error(" Eroare la încărcarea mesajelor:", err));
        }

        function startRecording() {
            navigator.mediaDevices.getUserMedia({ audio: true })
                .then(stream => {
                    mediaRecorder = new MediaRecorder(stream);
                    audioChunks = [];

                    document.getElementById("messageInput").placeholder = " Înregistrare în curs...";

                    mediaRecorder.ondataavailable = e => {
                        audioChunks.push(e.data);
                    };

                    mediaRecorder.onstop = () => {
                        recordedBlob = new Blob(audioChunks, { type: mediaRecorder.mimeType || 'audio/webm' });

                        console.log(" Înregistrare completă. Dimensiune blob:", recordedBlob.size);

                        document.getElementById("messageInput").placeholder = "Scrie un mesaj...";
                    };

                    mediaRecorder.start();
                    console.log(" Înregistrare pornită...");
                })
                .catch(err => console.error("Acces la microfon refuzat:", err));
        }

        function stopRecording() {
            if (mediaRecorder && mediaRecorder.state !== "inactive") {
                mediaRecorder.stop();
                console.log(" Înregistrare oprită");
            }
        }

        function sendMessage() {
            const input = document.getElementById("messageInput");
            const mesaj = input.value.trim();

            if (mesaj !== "") {
                // Trimite prin SignalR mesajul către ceilalți
                connection.invoke("SendMessage", currentClubId, userId, userEmail, mesaj)
                    .catch(err => console.error("Eroare la trimitere text:", err));

                // Salvează în baza de date
                fetch("/Users/StartUser?handler=TrimiteText", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                    },
                    body: new URLSearchParams({
                        mesaj: mesaj,
                        userId: userId,
                        idClub: currentClubId
                    })
                })
                    .then(response => {
                        if (!response.ok) throw new Error("Eroare la salvare mesaj text.");
                    })
                    .catch(err => console.error("Eroare la salvarea mesajului în DB:", err));

                input.value = "";
                return;
            }

            // Dacă există mesaj vocal înregistrat
            if (recordedBlob && recordedBlob.size > 0) {
                const formData = new FormData();
                formData.append("vocal", recordedBlob, "voce.webm");
                formData.append("idClub", currentClubId);
                formData.append("userId", userId);
                formData.append("userEmail", userEmail);

                fetch('/Users/StartUser?handler=Vocal', {
                    method: 'POST',
                    body: formData
                })
                    .then(r => r.text())
                    .then(fileName => {
                        if (!fileName || fileName.trim().length < 5) {
                            console.error("Răspuns invalid de la server:", fileName);
                            return;
                        }

                        const audioUrl = `/vocale/${fileName}`;
                        connection.invoke("SendVocal", currentClubId, userId, userEmail, audioUrl)
                            .catch(err => console.error("Eroare la SignalR vocal:", err));

                        recordedBlob = null;
                        audioChunks = [];
                    })
                    .catch(err => console.error("Eroare la upload vocal:", err));

                return;
            }

            alert("Scrie un mesaj sau înregistrează ceva înainte de a trimite.");
        }
        function afiseazaFavorite() {
    const chenar = document.getElementById("chenar-favorite");
    chenar.classList.remove("hidden");

    fetch('/Users/StartUser?handler=Favorite')
        .then(res => res.text())
        .then(html => {
            document.getElementById("continut-favorite").innerHTML = html;
        })
        .catch(err => {
            document.getElementById("continut-favorite").innerHTML = "<p style='color:red;'>Eroare la încărcare.</p>";
            console.error(err);
        });
}

function inchideFavorite() {
    document.getElementById("chenar-favorite").classList.add("hidden");
}

    </script>
}
